export const ORG_UNIT_REPORTED_ON_DATASET_FUNCTION =
  '//Example of function implementation\nparameters.progress(50);\n\nfunction calculatePercentageForOU(ou) {\n    return new Promise(function(resolve, reject) {\n        $.ajax({\n            url: "../../../api/24/analytics.json?dimension=dx:" + parameters.rule.json.data + ".REPORTING_RATE&dimension=pe:" + parameters.pe + "&dimension=ou:LEVEL-4;" + ou + "&hierarchyMeta=true",\n            type: "GET",\n            success: function(analyticsResults) {\n                /**\n                 * Conditioning starts here\n                 * \n                 * */\n                var orgUnits = [];\n                analyticsResults.rows.forEach(function(row) {\n                    var orgUnitId = row[1] + \'.\' + row[2]\n                    if (orgUnits.indexOf(orgUnitId) == -1) {\n                        orgUnits.push(orgUnitId);\n                    }\n                })\n                analyticsResults.metaData.dx = [parameters.rule.id];\n                analyticsResults.metaData.names[parameters.rule.id] = parameters.rule.name;\n                analyticsResults.rows = [];\n                analyticsResults.metaData.pe.forEach(function(pe) {\n                    var currentPeOrgUnits = [];\n                    orgUnits.forEach(function(orgUnit) {\n                        if (orgUnit.split(\'.\')[0] === pe) {\n                            currentPeOrgUnits.push(orgUnit)\n                        }\n                    });\n\n                    if (currentPeOrgUnits.length > 0) {\n                        analyticsResults.rows.push([parameters.rule.id, pe, ou, "" + (currentPeOrgUnits.length * 100 / analyticsResults.metaData.ou.length).toFixed(2)])\n                    }\n                });\n                analyticsResults.metaData.ou = [ou];\n                resolve(analyticsResults);\n            },\n            error: function(error) {\n                reject(error);\n            }\n        });\n    })\n}\n$.ajax({\n    url: "../../../api/24/analytics.json?dimension=pe:" + parameters.pe + "&dimension=ou:" + parameters.ou + "&skipData=true",\n    type: "GET",\n    success: function(dummyAnalyticsResults) {\n        var promises = [];\n        var analytics;\n        dummyAnalyticsResults.metaData.ou.forEach(function(ou) {\n            promises.push(calculatePercentageForOU(ou).then(function(analyticsResults) {\n                if (!analytics) {\n                    analytics = analyticsResults;\n                } else {\n                    analytics.metaData.ou = analytics.metaData.ou.concat(analyticsResults.metaData.ou);\n                    analyticsResults.metaData.ou.forEach(function(ouid) {\n                        analytics.metaData.names[ouid] = analyticsResults.metaData.names[ouid];\n                    })\n                    analytics.rows = analytics.rows.concat(analyticsResults.rows);\n                }\n            }));\n        })\n\n        Promise.all(promises).then(function() {\n            parameters.success(analytics);\n        }, function(error) {\n            parameters.error(error);\n        })\n    },\n    error: function(error) {\n        reject(error);\n    }\n});';
